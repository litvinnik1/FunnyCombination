package com.example.funnycombination.presentation.viewmodels

import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import com.example.funnycombination.presentation.state.GameScreenState
import com.example.funnycombination.domain.model.GameState
import com.example.funnycombination.presentation.event.GameEvent
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlin.random.Random
import javax.inject.Inject
import dagger.hilt.android.lifecycle.HiltViewModel

@HiltViewModel
class GameViewModel @Inject constructor() : ViewModel() {
    private val emojis = listOf("üòÄ", "üê±", "üçï", "üöó", "‚öΩ")
    private val _sequence = mutableListOf<String>()
    private val _userInput = mutableListOf<String>()
    
    // State
    private val _state = MutableStateFlow(GameScreenState())
    val state: StateFlow<GameScreenState> = _state.asStateFlow()
    
    // –ü—É–±–ª—ñ—á–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    var level by mutableStateOf(1)
        private set
    var gameState by mutableStateOf<GameState>(GameState.ShowingSequence)
        private set
    val sequence: List<String> get() = _sequence
    val userInput: List<String> get() = _userInput
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤)
    val currentScore: Int get() = level - 1

    fun onEvent(event: GameEvent) {
        when (event) {
            is GameEvent.StartGame -> startGameInternal()
            is GameEvent.OnSequenceShown -> onSequenceShownInternal()
            is GameEvent.OnEmojiClick -> onEmojiClickInternal(event.emoji)
        }
    }

    // –ü—É–±–ª—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    fun startGame() {
        onEvent(GameEvent.StartGame)
    }
    
    fun onSequenceShown() {
        onEvent(GameEvent.OnSequenceShown)
    }
    
    fun onEmojiClick(emoji: String) {
        onEvent(GameEvent.OnEmojiClick(emoji))
    }

    private fun startGameInternal() {
        _sequence.clear()
        _userInput.clear()
        level = 1
        addToSequence()
        gameState = GameState.ShowingSequence
        updateState()
    }

    private fun addToSequence() {
        // –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ –µ–º–æ–¥–∑—ñ
        val newEmoji = emojis.random()
        
        // –ó –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º —à–∞–Ω—Å–æ–º (5%) –¥–æ–¥–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–µ –µ–º–æ–¥–∑—ñ –ø—ñ–¥—Ä—è–¥
        if (_sequence.isNotEmpty() && _sequence.last() == newEmoji && kotlin.random.Random.nextFloat() < 0.05f) {
            // –î–æ–¥–∞—î–º–æ —â–µ –æ–¥–Ω–µ —Ç–∞–∫–µ –∂ –µ–º–æ–¥–∑—ñ
            _sequence.add(newEmoji)
        }
        
        _sequence.add(newEmoji)
        _userInput.clear()
        updateState()
    }

    private fun onSequenceShownInternal() {
        gameState = GameState.WaitingForInput
        updateState()
    }

    private fun onEmojiClickInternal(emoji: String) {
        if (gameState != GameState.WaitingForInput) return
        if (_sequence.isEmpty()) return // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ—Ä–æ–∂–Ω—å–æ—ó –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ
        _userInput.add(emoji)
        val idx = _userInput.size - 1
        if (idx >= _sequence.size || _sequence[idx] != emoji) {
            gameState = GameState.GameOver
            updateState()
            return
        }
        if (_userInput.size == _sequence.size) {
            level++
            addToSequence()
            gameState = GameState.ShowingSequence
            updateState()
        }
    }
    
    private fun updateState() {
        _state.value = GameScreenState(
            sequence = _sequence,
            userInput = _userInput,
            level = level,
            gameState = gameState,
            isInputEnabled = gameState is GameState.WaitingForInput,
            navigateToGameOver = gameState is GameState.GameOver
        )
    }
} 